{
	"title": "Creating a Plugin",
	"order": 0,
	"components": [
		{
			"name": "markdown",
			"body": {
				"markdown": "You can use the following command to create a plugin project in the working directory:\n\n```sh\nxpb plugin init <plugin_name>\n```\n\nThis command will create a Go module using **plugin_name** as the module name.\n\nThe key file to note is **plugin.go**. It will look something like this:",
				"rendered": "<p>You can use the following command to create a plugin project in the working directory:</p>\n<pre><code class=\"language-sh hljs language-bash\" data-highlighted=\"yes\">xpb plugin init &lt;plugin_name&gt;\n</code></pre>\n<p>This command will create a Go module using <strong>plugin_name</strong> as the module name.</p>\n<p>The key file to note is <strong>plugin.go</strong>. It will look something like this:</p>"
			}
		},
		{
			"name": "accordion",
			"components": [
				{
					"name": "markdown",
					"body": {
						"markdown": "```go\npackage plugin\n\nimport (\n\t\"github.com/pocketbase/pocketbase/core\"\n\t\"github.com/pocketbuilds/xpb\"\n)\n\ntype Plugin struct {}\n\nfunc init() {\n\txpb.Register(&Plugin{})\n}\n\n// Name implements xpb.Plugin.\nfunc (p *Plugin) Name() string {\n\treturn \"plugin\"\n}\n\n// This variable will automatically be set at build time by xpb\nvar version string\n\n// Version implements xpb.Plugin.\nfunc (p *Plugin) Version() string {\n\treturn version\n}\n\n// Description implements xpb.Plugin.\nfunc (p *Plugin) Description() string {\n\tpanic(\"unimplemented\")\n}\n\n// Init implements xpb.Plugin.\nfunc (p *Plugin) Init(app core.App) error {\n\tpanic(\"unimplemented\")\n}\n```",
						"rendered": "<pre><code data-highlighted=\"yes\" class=\"hljs language-go\"><span class=\"hljs-keyword\">package</span> plugin\n\n<span class=\"hljs-keyword\">import</span> (\n\t<span class=\"hljs-string\">\"github.com/pocketbase/pocketbase/core\"</span>\n\t<span class=\"hljs-string\">\"github.com/pocketbuilds/xpb\"</span>\n)\n\n<span class=\"hljs-keyword\">type</span> Plugin <span class=\"hljs-keyword\">struct</span> {}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">init</span><span class=\"hljs-params\">()</span></span> {\n\txpb.Register(&amp;Plugin{})\n}\n\n<span class=\"hljs-comment\">// Name implements xpb.Plugin.</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(p *Plugin)</span></span> Name() <span class=\"hljs-type\">string</span> {\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"plugin\"</span>\n}\n\n<span class=\"hljs-comment\">// This variable will automatically be set at build time by xpb</span>\n<span class=\"hljs-keyword\">var</span> version <span class=\"hljs-type\">string</span>\n\n<span class=\"hljs-comment\">// Version implements xpb.Plugin.</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(p *Plugin)</span></span> Version() <span class=\"hljs-type\">string</span> {\n\t<span class=\"hljs-keyword\">return</span> version\n}\n\n<span class=\"hljs-comment\">// Description implements xpb.Plugin.</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(p *Plugin)</span></span> Description() <span class=\"hljs-type\">string</span> {\n\t<span class=\"hljs-built_in\">panic</span>(<span class=\"hljs-string\">\"unimplemented\"</span>)\n}\n\n<span class=\"hljs-comment\">// Init implements xpb.Plugin.</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(p *Plugin)</span></span> Init(app core.App) <span class=\"hljs-type\">error</span> {\n\t<span class=\"hljs-built_in\">panic</span>(<span class=\"hljs-string\">\"unimplemented\"</span>)\n}\n</code></pre>"
					}
				}
			]
		},
		{
			"name": "markdown",
			"body": {
				"markdown": "The struct here called `Plugin` adheres to the `xpb.Plugin` interface, which allows it to be registered to the xpb runtime in the `init()` function (a special Go function that runs when your Go module is first loaded).\n\nThe `xpb.Plugin` interface looks like this:\n\n```go\ntype Plugin interface {\n\tInit(app core.App) error\n\tName() string\n\tVersion() string\n\tDescription() string\n}\n```\n\n- `Init(app core.App) error` is called before the pocketbase application runs. Here you should register pocketbase app [hooks](https://pocketbase.io/docs/go-event-hooks/) to make your plugin do whatever you want it to do.\n\n- `Name() string` should return your plugin's unique name. Plugin names should follow a snake case naming convention, i.e. \"my_plugin\".\n\n- `Version() string` should return your plugin's current version number. You will notice that in the example it returns a package-level variable called `version`. At build time, xpb automatically sets this variable for you using the version in the build projects `go.mod` file, so you should not need to generally worry about this.\n\n- `Description() string` should return a short description of what you plugin is and what it does. This is used in the set of pocketbase xpb commands for listing currently installed plugins.",
				"rendered": "<p>The struct here called <code data-highlighted=\"yes\" class=\"hljs language-undefined\">Plugin</code> adheres to the <code data-highlighted=\"yes\" class=\"hljs language-undefined\">xpb.Plugin</code> interface, which allows it to be registered to the xpb runtime in the <code data-highlighted=\"yes\" class=\"hljs language-scss\"><span class=\"hljs-built_in\">init</span>()</code> function (a special Go function that runs when your Go module is first loaded).</p>\n<p>The <code data-highlighted=\"yes\" class=\"hljs language-undefined\">xpb.Plugin</code> interface looks like this:</p>\n<pre><code class=\"language-go hljs\" data-highlighted=\"yes\"><span class=\"hljs-keyword\">type</span> Plugin <span class=\"hljs-keyword\">interface</span> {\n\tInit(app core.App) <span class=\"hljs-type\">error</span>\n\tName() <span class=\"hljs-type\">string</span>\n\tVersion() <span class=\"hljs-type\">string</span>\n\tDescription() <span class=\"hljs-type\">string</span>\n}\n</code></pre>\n<ul>\n<li><p><code data-highlighted=\"yes\" class=\"hljs language-scss\"><span class=\"hljs-built_in\">Init</span>(app core.App) error</code> is called before the pocketbase application runs. Here you should register pocketbase app <a href=\"https://pocketbase.io/docs/go-event-hooks/\">hooks</a> to make your plugin do whatever you want it to do.</p>\n</li>\n<li><p><code data-highlighted=\"yes\" class=\"hljs language-scss\"><span class=\"hljs-built_in\">Name</span>() string</code> should return your plugin's unique name. Plugin names should follow a snake case naming convention, i.e. \"my_plugin\".</p>\n</li>\n<li><p><code data-highlighted=\"yes\" class=\"hljs language-scss\"><span class=\"hljs-built_in\">Version</span>() string</code> should return your plugin's current version number. You will notice that in the example it returns a package-level variable called <code data-highlighted=\"yes\" class=\"hljs language-undefined\">version</code>. At build time, xpb automatically sets this variable for you using the version in the build projects <code data-highlighted=\"yes\" class=\"hljs language-go\"><span class=\"hljs-keyword\">go</span>.mod</code> file, so you should not need to generally worry about this.</p>\n</li>\n<li><p><code data-highlighted=\"yes\" class=\"hljs language-scss\"><span class=\"hljs-built_in\">Description</span>() string</code> should return a short description of what you plugin is and what it does. This is used in the set of pocketbase xpb commands for listing currently installed plugins.</p>\n</li>\n</ul>"
			}
		}
	]
}