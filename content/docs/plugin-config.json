{
	"title": "Plugin Config",
	"group": "creating-a-plugin",
	"order": 0,
	"components": [
		{
			"name": "markdown",
			"body": {
				"markdown": "The xpb runtime uses a `pocketbuilds.toml` file to allow for the user to customize plugin config options. This file is read, converted to JSON, and then automatically Unmarshalled into your plugin struct.\n\nConsider the example plugin below:\n```go\ntype Plugin struct {\n\tMyVar string `json:\"my_var\"`\n}\n\nfunc init() {\n\txpb.Register(&Plugin{\n\t\tMyVar: \"Hello, xpb!\",\n\t})\n}\n\nfunc (p *Plugin) Name() string {\n\treturn \"my_plugin\"\n}\n```\n\nThis plugin defines a config variable of type string called `MyVar`. This variable will be populated with the `my_plugin.my_var` value in \"pocketbuilds.toml\". This happens before your plugin's `Init` function is called. See the corresponding TOML below:\n\n```toml\n[my_plugin]\nmy_var = \"Hello from TOML\"\n```\n\nYou also may notice when the plugin is registered in the `init` function, is sets an initial value for `MyVar`. This is useful for setting your plugin's default config values if the user does not put it in their \"pocketbuilds.toml\" file.",
				"rendered": "<p>The xpb runtime uses a <code data-highlighted=\"yes\" class=\"hljs language-undefined\">pocketbuilds.toml</code> file to allow for the user to customize plugin config options. This file is read, converted to JSON, and then automatically Unmarshalled into your plugin struct.</p>\n<p>Consider the example plugin below:</p>\n<pre><code data-highlighted=\"yes\" class=\"hljs language-go\"><span class=\"hljs-keyword\">type</span> Plugin <span class=\"hljs-keyword\">struct</span> {\n\tMyVar <span class=\"hljs-type\">string</span> <span class=\"hljs-string\">`json:\"my_var\"`</span>\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">init</span><span class=\"hljs-params\">()</span></span> {\n\txpb.Register(&amp;Plugin{\n\t\tMyVar: <span class=\"hljs-string\">\"Hello, xpb!\"</span>,\n\t})\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(p *Plugin)</span></span> Name() <span class=\"hljs-type\">string</span> {\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"my_plugin\"</span>\n}\n</code></pre>\n<p>This plugin defines a config variable of type string called <code data-highlighted=\"yes\" class=\"hljs language-undefined\">MyVar</code>. This variable will be populated with the <code data-highlighted=\"yes\" class=\"hljs language-undefined\">my_plugin.my_var</code> value in \"pocketbuilds.toml\". This happens before your plugin's <code data-highlighted=\"yes\" class=\"hljs language-undefined\">Init</code> function is called. See the corresponding TOML below:</p>\n<pre><code data-highlighted=\"yes\" class=\"hljs language-ini\"><span class=\"hljs-section\">[my_plugin]</span>\n<span class=\"hljs-attr\">my_var</span> = <span class=\"hljs-string\">\"Hello from TOML\"</span>\n</code></pre>\n<p>You also may notice when the plugin is registered in the <code data-highlighted=\"yes\" class=\"hljs language-csharp\"><span class=\"hljs-keyword\">init</span></code> function, is sets an initial value for <code data-highlighted=\"yes\" class=\"hljs language-undefined\">MyVar</code>. This is useful for setting your plugin's default config values if the user does not put it in their \"pocketbuilds.toml\" file.</p>"
			}
		}
	]
}